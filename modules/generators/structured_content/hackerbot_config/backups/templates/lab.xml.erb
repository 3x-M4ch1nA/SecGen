<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])

  $files = []
  $log_files = []
  if $second_account.key?("leaked_filenames") &&  $first_account['leaked_filenames'].size > 0
    $files = $first_account['leaked_filenames']
    $log_files = $first_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s
  $second_user = $second_account['username'].to_s
  $example_file = "/home/#{$second_user}/#{$files.sample}"
  $example_dir = "/home/#{$second_user}/personal_secrets/"

  $server_ip = self.server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 5
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<greeting>Hey, today I'm your boss of sorts... Work with me and I'll pay you in flags :)</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that job.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>We are in to your system.</got_shell>
		<got_shell>We have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Backing Up and Recovering from Disaster: SSH/SCP, Deltas, and Rsync</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
<% $file = SecureRandom.hex(2) -%>
    <!--shell on the backup server-->
	  <get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<prompt>Use scp to copy the desktop /bin/ directory to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-bin-backup-<%= $file %>/.</prompt>

		<post_command>ls /home/<%= $main_user %>/remote-bin-backup-<%= $file %>/bin/ls /home/<%= $main_user %>/remote-bin-backup-<%= $file %>/bin/mkdir; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'cp_ssh.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
    <!--shell on the backup server-->
	  <get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync-->
		<prompt>It's your job to set up remote backups for <%= $second_user %> (a user on your system). Use rsync to create a full (epoch) remote backup of /home/<%= $second_user %> from your desktop system to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-full-backup/.</prompt>

		<post_command>ls /home/<%= $main_user %>/remote-rsync-full-backup/<%= $second_user %>/<%= $files.sample %>; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Doesn't look like you have backed up all of <%= $second_user %>'s files to /home/<%= $main_user %>/remote-rsync-backup/<%= $second_user %>. Try SSHing to the server and look at what you have backed up there.</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'rsync.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>The <%= $second_user %> user is about to create some files...</prompt>

		<post_command>echo "Note to self: drink more water" > /home/<%= $second_user %>/notes; echo "Beep boop beep" >> /home/<%= $second_user %>/logs/log1; echo <%= $flags.pop %> > /home/<%= $second_user %>/personal_secrets/flag; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok, good... (Find the flag...)</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

<!--TODO-->
	<attack>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>Create a differential backup of <%= $second_user %>'s desktop files in to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-differential1/.</prompt>

		<post_command>TODO</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok... </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

</hackerbot>
