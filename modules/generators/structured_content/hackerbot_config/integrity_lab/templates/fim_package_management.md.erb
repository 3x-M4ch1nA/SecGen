#### Detecting changes to resources using package management

On Linux systems, package management systems are used to organise, install, and update software. The package management system has a database that keeps track of all the files for each program or software package. Depending on the package management system used, the database may maintain hashes in order to detect changes to files since install. DEB-based systems (such as Debian, and Ubuntu) and RPM-based systems (such as Red Hat, Fedora, and OpenSUSE), typically store hashes of each file that is included in software packages. There are commands that can be used to detect changes to files that have occurred since being installed by the package management software.

Note that there are times where it is perfectly normal for a number of files to not match the 'fresh' versions that were installed: for example, configuring a system for use will involve editing configuration files that were distributed with software packages.

On Debian systems MD5 hashes are stored in:
/var/lib/dpkg/info/*.md5sums


# TODO: debsums
> -a also check config files
> -e *only* check config files
> -c only report *changed* files


dpkg-query -S /usr/bin/firefox
firefox: /usr/bin/firefox

sudo debsums -a firefox

Verify every installed package.
sudo debsums

Verify every installed package including configuration files
sudo debsums -a

Verify every installed package and report only changed files.
sudo debsums -c


The 'rpm' command has a -V flag for verifying the integrity of packages.

Choose any system file on the computer, such as /etc/securetty. To determine which package the file belongs to:

```bash
rpm -q --whatprovides *any-file-you-chose*
```
> Where any-file-you-chose is any file such as /etc/securetty.

The output of that command the package-name, and is required in the next
step.

Check the integrity of the file:

```bash
rpm -V *package-name*
```
> Where package-name is the output from the previous command.

An example from the output would be:

`` 5S.T..... c /etc/securetty ``
Which means, it is a config file (c), and:

-   S = file Size differs
-   M = Mode differs (includes permissions and file type)
-   5 = MD5 sum differs
-   D = Device major/minor number mismatch
-   L = readLink(2) path mismatch
-   U = User ownership differs
-   G = Group ownership differs
-   T = mTime differs
-   P = caPabilities differ

Use the above information to understand the output from your above rpm
-V command.

Next verify the integrity of all of the packages on the entire system
(this may take a while):

> rpm -Va

Try to understand the cause of any files failing the integrity checks.

Consider the limitations of this approach: what files will (and won't)
this approach to integrity management cover?
